{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchfield","handleChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","error","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","message","React","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e431bca5.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({id, name, email}) => {    //destructureing for cleaner code\r\n    return( \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots'src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"tachyons\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardsArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, handleChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        onChange={handleChange}\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY:\"scroll\", border:'1px solid grey', height:'760px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    ) ;\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setSearchField, requestRobots } from \"../action\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    handleChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const { searchField, handleChange, robots, error, isPending} =  this.props;//destructuring\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(searchField.toLocaleLowerCase());\r\n    });\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (isPending) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox handleChange={handleChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n  // console.log(text)\r\n  return {\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text,\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((res) => res.json())\r\n    .then((data) => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch((error) => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n};\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  // console.log(action.type)\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: true,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  // console.log(action.type)\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}